#include "imports/stdlib.fc";
#include "imports/op_codes.fc";

global slice owner;
global int exchange_rate;
global int next_balance;

const int EXCHANGE_RATE = 1000000000 / 2;

() init() impure {
    owner = get_sender(); 
    exchange_rate = EXCHANGE_RATE;
    next_balance = 0;
}

() receive_next(int amount) impure {
    next_balance += amount;
}

() send_next(slice recipient, int amount) impure {
    if (next_balance < amount) {
        return ();
    }
    
    next_balance -= amount;

    var payload = begin_cell()
        .store_uint(op_ft_transfer, 32)
        .store_uint(0, 64)
        .store_coins(amount)
        .store_slice(recipient)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(owner)
        .store_coins(0)
        .store_ref(payload)
        .end_cell();

    send_raw_message(msg.end_cell(), 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice sender_addr = in_msg_full.begin_parse().load_msg_addr();

    if (msg_value >= EXCHANGE_RATE) {
        send_next(sender_addr, 1);
    } else {
        send_money_back(sender_addr, msg_value, "Insufficient TON for exchange");
    }
}

() send_money_back(slice recipient, int amount, slice reason) impure inline {
    var msg = begin_cell()
        .store_slice(recipient)
        .store_coins(amount)
        .store_slice(reason)
        .end_cell();

    send_raw_message(msg, 1);
}

() set_owner(slice new_owner) impure {
    if (equal_slice_bits(get_sender(), owner)) { 
        owner = new_owner;
    }
}
